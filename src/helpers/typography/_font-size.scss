//
//   Typography - Font Size
//
////////////////////////////////////////////////////////////////////////////////
//
//   Global value
//
////////////////////////////////////////////////////////////////////////////////
//
$font-size: null;
//
////////////////////////////////////////////////////////////////////////////////
//
//   Definition
//
////////////////////////////////////////////////////////////////////////////////
//
$salt-font-size: (
  //
  //   Responsive ?
  //
  is-responsive:           true,

  //
  //   Domain
  //
  domain:                  'fs',

  //
  //   Property
  //
  property:                'font-size',

  //
  //   Template ?
  //
  template:                true,

  //
  //   Values
  //
  values: (
  )
) !default;
//
////////////////////////////////////////////////////////////////////////////////
//
//   Commit properties
//   (Re-)generate the property definition based on the dynamic values
//   (settings).
//
//   @return {Map} Return the new property defition.
//
////////////////////////////////////////////////////////////////////////////////
//
@function font-size-commit-properties()
{
  $list: ();
  $values: map-get($salt-font-size, values);

  @each $font in $salt-typography-fonts
  {
    $name: map-get($font, family);
    @if map-has-key($font, name)
    {
      $name: map-get($font, name);
    }

    // list through predefined values
    // list through dynamic values
    $values: map-merge($values, map-get($font, sizes));
    @each $cvalue, $value in $values
    {
      $key: $name + '-' + $cvalue;
      // @TODO: How to incorporate the media restriction ?
      // @TODO: Find a way to have a multiline property definition. Something like a template with replace placeholder.
      //        replace(template, value1, value2, value3...)

      // $value: font-size(nth($value, 1), nth($value, 2));
      $list: map-set($list, $key, $value);
    }
  }

  $values: (
    values: map-merge($list, map-get($salt-font-size, values))
  );
  $font-size: map-merge($salt-font-size, $values) !global;

  @return $font-size;
}
//
////////////////////////////////////////////////////////////////////////////////
//
//   Template
//   Template used to output the value
//
//   @param {length} $min
//   @param {length} $max
//
////////////////////////////////////////////////////////////////////////////////
//
@mixin font-size-template($min, $max)
{
  font-size: font-size($min, $max);
  @include media('<xxs')
  {
    font-size: $min;
  }
  @include media('>xxl')
  {
    font-size: $max;
  }
}
//
////////////////////////////////////////////////////////////////////////////////
//
//   Helper generator
//   Generate the property helper
//
////////////////////////////////////////////////////////////////////////////////
@mixin font-size-helper-generator()
{
  @if $font-size == null
  {
    $p: call(font-size-commit-properties);
  }

  @each $key, $value in map-get($font-size, values)
  {
    $prefix: helper-prefix();
    $domain: $prefix + map-get($font-size, domain);
    $responsive: map-get($font-size, is-responsive);
    $property: map-get($font-size, property);

    $min: nth($value, 1);
    $max: nth($value, 2);

    #{$domain + '-' + $key}
    {
      @include font-size-template($min, $max);
    }

    @if $responsive
    {
      $breakpoints: map-keys($grid-breakpoints);
      @each $breakpoint in $breakpoints
      {
        @include media('>'+$breakpoint)
        {
          #{$domain + "-" + $breakpoint + '-' + $key}
          {
            // @TODO: Is it correct to output the size this way ? When in size xxs just set the size as it ? Constrained to the size of the breakpoint and up ?
            #{$property}: font-size($min, $max);
          }
        }
      }
    }
  }
}
//
////////////////////////////////////////////////////////////////////////////////
//
//   Mixin
//
//   @param {String} $value
//   @param {String} $breakpoint
//
//   @author Alexandre Masy
//   @version 1.0
//   @group css-mixin
//
//   @example SCSS â€“ Usage
//     @include font-size(transparent);     => font-size: transparent;
//     @include font-size(<palettefont-size>);  => font-size: <palettefont-size>;
//
//   @see https://developer.mozilla.org/en/docs/Web/CSS/font-size
//
////////////////////////////////////////////////////////////////////////////////
//
@mixin font-size($value, $breakpoint: null)
{
  @if $font-size == null
  {
    $p: call(font-size-commit-properties);
  }
  @include helper-factory-mixin($font-size, $value, $breakpoint);
}
