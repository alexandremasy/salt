//
//   Typography – Font-Size
//   Output the appropriate font-size
//
//   @param {number} $font-size-min - The minimum font-size
//   @param {number} $font-size-max - The maximum font-size
//   @param {number} $breakpoint-min - The smallest breakpoint
//   @param {number} $breakpoint-max - The largest breakpoint
//
@mixin typography-fontsize($name, $font-size-min, $font-size-max, $breakpoint-min, $breakpoint-max)
{
  .f-#{$name}
  {
    @include media('>xxl')
    {
      font-size: $font-size-max * 1em;
    }

    @include media('<xxs')
    {
      font-size: $font-size-min * 1em;
    }

    // @TODO Get the unit as one interpolator
    //
    font-size: calc(#{$font-size-min*1em} + (#{strip-unit($font-size-max)} - #{strip-unit($font-size-min)}) * (100vw - #{$breakpoint-min}) / (#{strip-unit($breakpoint-max)} - #{strip-unit($breakpoint-min)}));
  }
}

//
//   Typography – Font-Sizes
//   Create the utility classes
//
//   @param {number} $font-size-min - The minimum font-size
//   @param {number} $font-size-max - The maximum font-size
//   @param {number} $breakpoint-min - The smallest breakpoint
//   @param {number} $breakpoint-max - The largest breakpoint
//
@mixin typography-fontsizes($font-size-heading, $font-size-body)
{
  $breakpoint-min: grid-parse('xxs');
  $breakpoint-max: grid-parse('xxl');

  $base-min: nth($font-size-base, 1);
  $base-max: nth($font-size-base, 2);

  // $sizes: join($font-size-heading, $font-size-body);
  $sizes: $font-size-heading;
  @each $size in $sizes
  {
    $name: nth($size, 1);
    $size: nth($size, 2);
    $min: nth($size, 1);
    $max: nth($size, 2);

    @include typography-fontsize($name, $min, $max, $breakpoint-min, $breakpoint-max);
  }

  @content;
}
