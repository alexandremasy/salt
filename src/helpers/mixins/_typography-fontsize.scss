//
//   Typography – Font-Size
//   Output the appropriate font-size
//
//   @param {number} $font-size-min - The minimum font-size
//   @param {number} $font-size-max - The maximum font-size
//   @param {number} $breakpoint-min - The smallest breakpoint
//   @param {number} $breakpoint-max - The largest breakpoint
//
@mixin typography-fontsize($font-size-min, $font-size-max, $breakpoint-min, $breakpoint-max)
{
  $unit: 1rem;
  @include media('>xxl')
  {
    font-size: $font-size-max * $unit;
  }

  @include media('<xxs')
  {
    font-size: $font-size-min * $unit;
  }

  font-size: calc(#{$font-size-min*$unit} + (#{strip-unit($font-size-max)} - #{strip-unit($font-size-min)}) * (100vw - #{$breakpoint-min}) / (#{strip-unit($breakpoint-max)} - #{strip-unit($breakpoint-min)}));
}


//
//   Typography – Font-Sizes
//   Create the utility classes
//
//   @param {number} $font-size-min - The minimum font-size
//   @param {number} $font-size-max - The maximum font-size
//   @param {number} $breakpoint-min - The smallest breakpoint
//   @param {number} $breakpoint-max - The largest breakpoint
//
@mixin typography-fontsizes($font-size-heading, $font-size-body)
{
  $breakpoint-min: grid-parse('xxs');
  $breakpoint-max: grid-parse('xxl');

  // heading
  @if $font-size-heading != $font-size-body
  {
    @each $size in $font-size-heading
    {
      $name: nth($size, 1);
      $size: nth($size, 2);
      $min: nth($size, 1);
      $max: nth($size, 2);

      .f-heading-#{$name}
      {
        @include typography-fontsize($min, $max, $breakpoint-min, $breakpoint-max);
      }
    }
  }

  // body
  @each $size in $font-size-body
  {
    $name: nth($size, 1);
    $size: nth($size, 2);
    $min: nth($size, 1);
    $max: nth($size, 2);

    .f-#{$name}
    {
      @include typography-fontsize($min, $max, $breakpoint-min, $breakpoint-max);
    }
  }


  @content;
}
