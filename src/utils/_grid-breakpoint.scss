//
//   Parse an expression to return a valid media-query expression
//
//   @param {String} $expression - Expression to parse
//   @return {String} - Valid media query
//
@function grid-breakpoint($expression) {
  // If it is part of $g-media, it has no operator
  // then there is no need to go any further, just return the value
  @if map-has-key($g-media, $expression) {
    @return map-get($g-media, $expression);
  }

  $operator: grid-parse-operator($expression);
  $dimension: grid-breakpoint-dimension($expression, $operator);
  $prefix: grid-breakpoint-prefix($operator);
  $value: grid-parse($expression);

  @return "(#{$prefix}-#{$dimension}: #{$value})";
}

//
//   Get dimension prefix based on an operator
//
//   @param {String} $operator - Operator
//   @return {String} - `min` or `max` or `null` if the operator is not valid
//   @access private
//
@function grid-breakpoint-prefix($operator) {
  @if index($g-operators, $operator) {
    @return if(index(($less, $less-or-equal), $operator), "max", "min");
  }

  @return null;
}

//
//   Get dimension of an expression, based on a found operator
//
//   @param {String} $expression - Expression to extract dimension from
//   @param {String} $operator - Operator from `$expression`
//   @return {String} - `width` or `height` (or potentially anything else)
//   @access private
//
@function grid-breakpoint-dimension($expression, $operator) {
  $dimension: "width";
  $parsed-dimension: null;

  // @debug 'expression: #{$expression}';
  // @debug 'operator: #{$operator}';

  @if str-length($expression) > 0 and $operator != null {
    $operator-index: str-index($expression, $operator);
    $parsed-dimension: str-slice($expression, 0, $operator-index - 1);
  }

  @if $parsed-dimension != null and str-length($parsed-dimension) > 0 {
    $dimension: $parsed-dimension;
  }

  @return $dimension;
}

//
//   Generates a media query based on a list of conditions
//
//   @param {Arglist}   $conditions  - Media query conditions
//
//   @example scss - With a single set breakpoint
//      @include media('>m') { }
//
//   @example scss - With two set breakpoints
//      @include media('>m', '<=l') { }
//
//   @example scss - With a static expression
//      @include media('retina2x') { }
//
//   @example scss - Mixing everything
//      @include media('>=m', '<xl', 'retina3x') { }
//
$g-in-media: false;

@mixin media($conditions...) {
  $g-in-media: true !global;
  @if length($conditions) == 0 {
    @content;
    $g-in-media: false !global;
  } @else if length($conditions) > 0 {
    @media #{unquote(grid-breakpoint(nth($conditions, 1)))} {
      // Recursive call
      @include media(list-slice($conditions, 2) ...) {
        @content;
        $g-in-media: false !global;
      }
    }
  }
}
