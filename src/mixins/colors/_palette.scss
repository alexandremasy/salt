//
//
//
//
$salt-palettes: () !default;
@function palette($name, $colorname, $colorvalue: null)
{
  @if $colorvalue
  {
    @return palette-set-color($name, $colorname, $colorvalue);
  }

  @return palette-get-color($name, $colorname);
}


//
//   Get the palette by it's name
//
//   @param {String} $name
//
@function palette-get($name)
{
  $name: if(type-of($name) == "string", unquote($name), $name);

  @if map-has-key($salt-palettes, $name)
  {
    @return map-get($salt-palettes, $name);
  }

  @return ();
}

@function palette-set($name, $palette)
{
  $name: if(type-of($name) == "string", unquote($name), $name);
  $salt-palettes: map-merge($salt-palettes, ($name: $palette)) !global;

  @return null;
}

//
//   Get the color in a palette
//
//   @param {String} $palettename
//   @param {String} $colorname
//   @return {Color}
//
@function palette-get-color($palettename, $colorname)
{
  // $palettename: if(type-of($palettename) == "string", unquote($palettename), $palettename);
  // $colorname: if(type-of($colorname) == "string", unquote($colorname), $colorname);
  $palette: palette-get($palettename);

  @debug 'name' $palettename;
  @debug 'palette' $palette;

  @if map-has-key($palette, $colorname)
  {
    $value: map-get($palette, $colorname);
    @debug "return #{$value}";
    @return $value;
  }

  @return null;
}

@function palette-set-color($palettename, $colorname, $colorvalue)
{
  $palettename: if(type-of($palettename) == "string", unquote($palettename), $palettename);
  $colorname: if(type-of($colorname) == "string", unquote($colorname), $colorname);

  $map: ($colorname: $colorvalue);

  $palette: palette-get($palettename);
  $palette: map-merge($palette, $map);
  $p: palette-set($palettename, $palette);

  @return $palette;
}
