//
//   Helper Factory – Iterator
//   Iterate over the given list to generate the appropriate helper
//
//   @param {Map} $property   A map containing the definition of the property
//      @property {Boolean} is-responsive  Is the property responsive
//      @property {String}  domain   The domain used for the helper generation
//      @property {String}  property The css property
//      @property {Map}     values   The allowed values for the property
//
@mixin helper-factory-iterator($property)
{
  $prefix: helper-prefix();

  @if $prefix != null
  {
    @each $key, $value in map-get($property, values)
    {
      @include helper-factory-helper($property, $key, $value);
    }
  }
}

//
//   Helper Factory // Helper
//     Generate the class helper and the responsive one if needed
//
//   @param {Map} $property      A map containing the definition of the property
//      @property {Boolean} is-responsive  Is the property responsive
//      @property {String}  domain   The domain used for the helper generation
//      @property {String}  property The css property
//      @property {Map}     values   The allowed values for the property
//   @param {String} $class         The domain for which generate the helper
//   @param {String} $value         The class
//
@mixin helper-factory-helper($property, $class, $value)
{
  $prefix: helper-prefix();

  $responsive: map-get($property, is-responsive);
  $domain: map-get($property, domain);
  $values: map-get($property, values);
  $property: map-get($property, property);

  $domain: $prefix + $domain;
  #{$domain + '-' + $class}
  {
    #{$property}: if(type-of($value) == 'string', unquote($value), $value);
  }

  @if $responsive
  {
    $breakpoints: map-keys($grid-breakpoints);
    @each $breakpoint in $breakpoints
    {
      @include media('>'+$breakpoint)
      {
        #{$domain + "-" + $breakpoint + '-' + $class}
        {
          #{$property}: if(type-of($value) == 'string', unquote($value), $value);
        }
      }
    }
  }
}

//
//   Helper Factory // Mixin
//      If it is allowed and permitted we'll extends the appropriate property
//      otherwise, we'll have to output the value
//
//   @param {Map} $property      A map containing the definition of the property
//      @property {Boolean} is-responsive  Is the property responsive
//      @property {String}  domain   The domain used for the helper generation
//      @property {String}  property The css property
//      @property {Map}     values   The allowed values for the property
//   @param {String} $value         The class
//   @param {String} $breakpoint   The breakpoint to constraint the value to
//
@mixin helper-factory-mixin($property, $value, $breakpoint: null)
{
  @if index((null, ''), $property)
  {
    @error "Error: The given property is not valid:" $property;
  }

  @if index((null, ''), $value)
  {
    @error "Error: The given value is not valid for #{map-get($property, property)}:" $value;
  }

  $responsive: map-get($property, is-responsive);
  $domain: map-get($property, domain);
  $values: map-get($property, values);
  $property: map-get($property, property);

  @if map-has-key($values, $value)
  {
    @if $salt-inside-media
    {
      #{$property}: unquote($value);
    }
    @else
    {
      @if $salt-helpers != none
      {
        $prefix: helper-prefix();

        // extends possible
        $ex: $prefix + $domain + '-' + $value;
        @if $breakpoint
        {
          $ex: $prefix + $domain + '-' + $breakpoint + '-' + $value;
        }

        @extend #{$ex};
      }
      @else
      {
        #{$property}: unquote($value);
      }
    }
  }
  @else
  {
    @error "Error: The given value is not valid for #{map-get($property, property)}:" $value;
  }
}
