@mixin grid-parse-operator-test
{
  @include test-module('Grid Parse // Operator')
  {
    //////////////////////////////////////////////////////////////////////////////
    //
    //  Equal
    //
    //////////////////////////////////////////////////////////////////////////////
    @include test('grid-parse-oparator {=m}')
    {
      $test: grid-parse-operator('=m');
      $expect: '=';

      @include assert-equal($test, $expect, '=m');
    }

    @include test('grid-parse-oparator {=xl}')
    {
      $test: grid-parse-operator('=xl');
      $expect: '=';

      @include assert-equal($test, $expect, '=xl');
    }

    //////////////////////////////////////////////////////////////////////////////
    //
    //  more || more-or-equal
    //
    //////////////////////////////////////////////////////////////////////////////
    @include test('grid-parse-oparator {>m}')
    {
      $test: grid-parse-operator('>m');
      $expect: '>';

      @include assert-equal($test, $expect, '>m');
    }

    @include test('grid-parse-oparator {>=m}')
    {
      $test: grid-parse-operator('>=m');
      $expect: '>=';

      @include assert-equal($test, $expect, '>=m');
    }

    @include test('grid-parse-oparator {>xl}')
    {
      $test: grid-parse-operator('>xl');
      $expect: '>';

      @include assert-equal($test, $expect, '>xl');
    }

    @include test('grid-parse-oparator {>=xl}')
    {
      $test: grid-parse-operator('>=xl');
      $expect: '>=';

      @include assert-equal($test, $expect, '>=xl');
    }

    //////////////////////////////////////////////////////////////////////////////
    //
    //  less || less-or-equal
    //
    //////////////////////////////////////////////////////////////////////////////
    @include test('grid-parse-oparator {<m}')
    {
      $test: grid-parse-operator('<m');
      $expect: '<';

      @include assert-equal($test, $expect, '<m');
    }

    @include test('grid-parse-oparator {<=m}')
    {
      $test: grid-parse-operator('<=m');
      $expect: '<=';

      @include assert-equal($test, $expect, '<=m');
    }

    @include test('grid-parse-oparator {<xl}')
    {
      $test: grid-parse-operator('<xl');
      $expect: '<';

      @include assert-equal($test, $expect, '<xl');
    }

    @include test('grid-parse-oparator {<=xl}')
    {
      $test: grid-parse-operator('<=xl');
      $expect: '<=';

      @include assert-equal($test, $expect, '<=xl');
    }

    //////////////////////////////////////////////////////////////////////////////
    //
    //  Error
    //
    //////////////////////////////////////////////////////////////////////////////
    @include test('grid-parse-oparator {m}')
    {
      $test: grid-parse-operator('m');
      $expect: null;

      @include assert-equal($test, $expect, 'm');
    }

    @include test('grid-parse-oparator {<>m}')
    {
      $test: grid-parse-operator('<>m');
      $expect: '<';

      @include assert-equal($test, $expect, '<>m');
    }

    @include test('grid-parse-oparator {<==}')
    {
      $test: grid-parse-operator('<==');
      $expect: '<=';

      @include assert-equal($test, $expect, '<>m');
    }

    @include test('grid-parse-oparator {!=m}')
    {
      $test: grid-parse-operator('!=m');
      $expect: null;

      @include assert-equal($test, $expect, '!=m');
    }

    @include test('grid-parse-oparator {null}')
    {
      $test: grid-parse-operator('');
      $expect: null;

      @include assert-equal($test, $expect, '!=m');
    }
  }
}
